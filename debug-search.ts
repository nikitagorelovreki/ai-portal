import { config } from 'dotenv';
import { searchQdrant } from './src/agents/notion-agent';

config();

async function debugSearch() {
  console.log('🔍 Debugging search functionality...');

  // Test queries that should find job hunting tasks
  const testQueries = [
    'Update LinkedIn profile',
    'job hunting',
    'CV',
    'interview',
    'LinkedIn'
  ];

  for (const query of testQueries) {
    console.log(`\n--- Searching for: "${query}" ---`);

    try {
      // Create a simple test vector (this is what the bot would do)
      // NOTE: This test vector is a dummy. In a real scenario, it should be generated by Ollama.
      // The purpose here is to check if *any* relevant data exists in Qdrant.
      const testVector = new Array(3072).fill(0.1);

      console.log('Searching Qdrant...');
      const results = await searchQdrant(testVector, 10);

      console.log(`Found ${results.length} results:`);

      // Show ALL results without filtering
      results.forEach((result, index) => {
        console.log(`\n--- Result ${index + 1} ---`);
        console.log('Score:', result.score);
        console.log('ID:', result.id);
        console.log('Task name:', result.payload?.['Task name']);
        console.log('Status:', result.payload?.['Status']);
        console.log('Effort level:', result.payload?.['Effort level']);
        console.log('Task type:', result.payload?.['Task type']);
        console.log('Priority:', result.payload?.['Priority']);
        console.log('Title:', result.payload?.title);
        console.log('Content:', typeof result.payload?.content === 'string' ? result.payload.content.substring(0, 100) + '...' : result.payload?.content);
      });

    } catch (error) {
      console.error('Error:', error);
    }
  }
}

debugSearch(); 