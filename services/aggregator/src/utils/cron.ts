import * as cron from 'node-cron';
import { DatabaseService } from '../services/database';
import { HealthService } from '../services/healthService';
import { AdviceService } from '../services/adviceService';

export class CronService {
  private healthService: HealthService;
  private adviceService: AdviceService;

  constructor(private db: DatabaseService) {
    this.healthService = new HealthService(db);
    this.adviceService = new AdviceService(db);
  }

  start(): void {
    console.log('üïê Starting cron jobs...');

    // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç - –ø–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    cron.schedule('*/30 * * * *', async () => {
      try {
        console.log('üìä Recomputing daily metrics...');
        await this.healthService.recomputeDailyMetrics(1); // user_id = 1 –¥–ª—è MVP
        console.log('‚úÖ Daily metrics updated');
      } catch (error) {
        console.error('‚ùå Error recomputing daily metrics:', error);
      }
    });

    // 11:00 - —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–æ–≤–µ—Ç
    cron.schedule('0 11 * * *', async () => {
      try {
        console.log('üåÖ Sending morning advice...');
        const advice = await this.adviceService.getTodayAdvice();
        console.log('‚úÖ Morning advice sent:', advice.message);
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram –±–æ—Ç
        // await this.sendTelegramAdvice(advice);
      } catch (error) {
        console.error('‚ùå Error sending morning advice:', error);
      }
    });

    // 20:00 - –≤–µ—á–µ—Ä–Ω–∏–π —Å–æ–≤–µ—Ç
    cron.schedule('0 20 * * *', async () => {
      try {
        console.log('üåô Sending evening advice...');
        const advice = await this.adviceService.getTodayAdvice();
        console.log('‚úÖ Evening advice sent:', advice.message);
        
        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram –±–æ—Ç
        // await this.sendTelegramAdvice(advice);
      } catch (error) {
        console.error('‚ùå Error sending evening advice:', error);
      }
    });

    // –ö–∞–∂–¥—ã–π —á–∞—Å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Notion (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    cron.schedule('0 * * * *', async () => {
      try {
        console.log('üîÑ Checking Notion sync status...');
        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
        // await this.checkNotionSync();
      } catch (error) {
        console.error('‚ùå Error checking Notion sync:', error);
      }
    });

    console.log('‚úÖ Cron jobs started');
  }

  stop(): void {
    console.log('üõë Stopping cron jobs...');
    cron.getTasks().forEach(task => task.stop());
    console.log('‚úÖ Cron jobs stopped');
  }

  // TODO: –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ –≤ Telegram
  private async sendTelegramAdvice(advice: any): Promise<void> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –±–æ—Ç–æ–º
    console.log('üì± Would send to Telegram:', advice.message);
  }

  // TODO: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Notion
  private async checkNotionSync(): Promise<void> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üìù Checking if Notion sync is needed...');
  }
}
